-- ========================
-- 1. DEPARTMENT TABLE
-- ========================
CREATE TABLE TBL_DEPARTMENT(
    DID            NUMBER PRIMARY KEY,
    DNAME          VARCHAR2(70)
);

CREATE SEQUENCE SEQ_DEPARTMENT START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;


-- ========================
-- 2. STUDENT TABLE
-- ========================
CREATE TABLE TBL_STUDENT (
    STUDENT_ID     NUMBER PRIMARY KEY,
    FIRST_NAME     VARCHAR2(20),
    LAST_NAME      VARCHAR2(30),
    EMAIL          VARCHAR2(70),
    DOB            DATE,
    GENDER         VARCHAR2(8),
    TEACHER_ID     NUMBER,
    ENROLL_DATE    DATE,
    STATUS         VARCHAR2(15)
);
ALTER TABLE TBL_STUDENT ADD CONSTRAINT FK_TBL_STUD_TEACHER_ID FOREIGN KEY (TEACHER_ID) REFERENCES TBL_TEACHER(TEACHER_ID);

ALTER TABLE TBL_STUDENT ADD DID NUMBER;

ALTER TABLE TBL_STUDENT ADD CONSTRAINT FK_TBL_STUD_DID FOREIGN KEY (DID) REFERENCES TBL_DEPARTMENT(DID);

ALTER TABLE TBL_STUDENT ADD PHOTO BLOB;

ALTER TABLE TBL_STUDENT ADD AGE NUMBER;

ALTER TABLE TBL_STUDENT ADD (
    PARENT_NAME        VARCHAR2(100),
    RELATIONSHIP       VARCHAR2(30),
    EMERGENCY_CONTACT  VARCHAR2(15),
    ADDRESS            VARCHAR2(200)
);

CREATE OR REPLACE TRIGGER TGR_SET_AGE 
    BEFORE INSERT OR UPDATE ON TBL_STUDENT
    FOR EACH ROW
    BEGIN
        :NEW.AGE := EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM :NEW.DOB);
    END;
/

UPDATE TBL_STUDENT SET AGE = EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM DOB) WHERE AGE IS NULL;

UPDATE TBL_STUDENT SET ENROLL_DATE = TO_DATE('01-' || TO_CHAR(ENROLL_DATE, 'DD') || '-2025', 'MM-DD-YYYY');

ALTER TABLE TBL_STUDENT ADD PASSWORD VARCHAR2(15);

ALTER TABLE TBL_STUDENT ADD PWD_HASH VARCHAR2(4000);

ALTER TABLE TBL_STUDENT ADD PWD_SALT VARCHAR2(100);

CREATE OR REPLACE PROCEDURE password_encrypt_pro (p_password IN VARCHAR2, o_salt OUT VARCHAR2, o_hash OUT VARCHAR2) AS
    l_password VARCHAR2(100) :=p_password;
    l_salt VARCHAR2(100);
    l_hash VARCHAR2(4000);
BEGIN
    --Generate random salt (16 uppercase letters)
    l_salt := DBMS_RANDOM.STRING ('A', 16);

    --Create hash using password + salt
    l_hash := APEX_UTIL.GET_HASH (
                                    p_values => APEX_T_VARCHAR2 (l_password, l_salt), 
                                    p_salted => FALSE
                                )
    ;
    o_salt := l_salt;
    o_hash := l_hash;
END;

CREATE SEQUENCE SEQ_STUDENT START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;


-- ========================
-- 3. TEACHER TABLE
-- ========================
CREATE TABLE TBL_TEACHER (
    TEACHER_ID     NUMBER NOT NULL PRIMARY KEY,
    FIRST_NAME     VARCHAR2(20),
    LAST_NAME      VARCHAR2(30),
    EMAIL          VARCHAR2(70),
    HIRE_DATE      DATE,
    SUBJECT        VARCHAR2(70),
    STATUS         VARCHAR2(15)
);

DESC TBL_TEACHER;

ALTER TABLE TBL_TEACHER ADD DID NUMBER;

ALTER TABLE TBL_TEACHER ADD CONSTRAINT FK_TBL_TEACH_DID FOREIGN KEY (DID) REFERENCES TBL_DEPARTMENT(DID);

ALTER TABLE TBL_TEACHER ADD PASSWORD VARCHAR2(15);

ALTER TABLE TBL_TEACHER ADD GENDER VARCHAR2(10);

ALTER TABLE TBL_TEACHER ADD MOBILE NUMBER(10);

ALTER TABLE TBL_TEACHER ADD PHOTO BLOB;

ALTER TABLE TBL_TEACHER ADD PHOTO_FILENAME VARCHAR2(255);

ALTER TABLE TBL_TEACHER ADD PHOTO_MIMETYPE VARCHAR2(100);

ALTER TABLE TBL_TEACHER ADD PWD_HASH VARCHAR2(4000);

ALTER TABLE TBL_TEACHER ADD PWD_SALT VARCHAR2(100);

CREATE SEQUENCE SEQ_TEACHER START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;



-- ========================
-- 4. LEAVE TYPE TABLE
-- ========================
CREATE TABLE TBL_LEAVE_TYPE (
  LEAVE_TYPE_ID     NUMBER PRIMARY KEY,
  LEAVE_TYPE_CODE   VARCHAR2(20) UNIQUE NOT NULL, 
  LEAVE_TYPE_NAME   VARCHAR2(100) NOT NULL,       
  ALLOW_WEEKENDS    VARCHAR2(3) DEFAULT 'NO' CHECK (ALLOW_WEEKENDS IN ('YES', 'NO')),
  DESCRIPTION       VARCHAR2(255)
);

CREATE SEQUENCE SEQ_LEAVE_TYPE_ID START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

ALTER TABLE TBL_LEAVE_TYPE ADD MAX_DAYS_ALLOWED NUMBER(2) DEFAULT 5 CHECK (MAX_DAYS_ALLOWED BETWEEN 1 AND 22);

INSERT INTO TBL_LEAVE_TYPE VALUES (1, 'EMERGENCY', 'EMERGENCY LEAVE', 'YES', 'USED IN URGENT/EMERGENCY SITUATIONS. WEEKENDS ALLOWED.', 3);

INSERT INTO TBL_LEAVE_TYPE VALUES (2, 'CASUAL', 'CASUAL LEAVE', 'NO', 'SHORT LEAVE FOR PERSONAL REASONS. WEEKENDS NOT ALLOWED.', 5);

INSERT INTO TBL_LEAVE_TYPE VALUES (3, 'SICK', 'SICK LEAVE', 'NO', 'LEAVE DUE TO ILLNESS. WEEKENDS NOT ALLOWED.', 5);

INSERT INTO TBL_LEAVE_TYPE VALUES (4, 'VACATION', 'VACATION LEAVE', 'NO', 'PLANNED TIME OFF. WEEKENDS NOT ALLOWED.', 10);

INSERT INTO TBL_LEAVE_TYPE VALUES (5, 'COMPENSATORY OFF', 'COMPENSATORY OFF', 'YES', 'LEAVE FOR EXTRA HOURS WORKED. WEEKENDS ALLOWED.', 2);

ALTER TABLE TBL_LEAVE_TYPE ADD REQUIRES_DOCUMENT CHAR(1) DEFAULT 'N' CHECK (REQUIRES_DOCUMENT IN ('Y', 'N'));

UPDATE TBL_LEAVE_TYPE SET REQUIRES_DOCUMENT = 'Y' WHERE LEAVE_TYPE_CODE = 'SICK';

UPDATE TBL_LEAVE_TYPE SET REQUIRES_DOCUMENT = 'N' WHERE LEAVE_TYPE_CODE IN ('EMERGENCY', 'CASUAL', 'VACATION', 'COMPENSATORY OFF');


-- ========================
-- 5. LEAVE REQUEST TABLE
-- ========================
CREATE TABLE TBL_LEAVE_REQUEST (
    REQUEST_ID     NUMBER PRIMARY KEY,
    TEACHER_ID     NUMBER,
    LEAVE_TYPE     VARCHAR2(50),
    FROM_DATE      DATE,
    TO_DATE        DATE,
    REASON         VARCHAR2(500),
    STATUS         VARCHAR2(20) DEFAULT 'PENDING',
    REQUESTED_ON   DATE DEFAULT SYSDATE
);

CREATE SEQUENCE SEQ_LEAVE START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;

ALTER TABLE TBL_LEAVE_REQUEST ADD CONSTRAINT FK_TBL_LEAVE_REQUEST_TEACHER_ID FOREIGN KEY (TEACHER_ID) REFERENCES TBL_TEACHER(TEACHER_ID);

ALTER TABLE TBL_LEAVE_REQUEST RENAME COLUMN LEAVE_TYPE TO LEAVE_TYPE_CODE;

ALTER TABLE TBL_LEAVE_REQUEST MODIFY LEAVE_TYPE_CODE VARCHAR2(20);

ALTER TABLE TBL_LEAVE_REQUEST ADD CONSTRAINT FK_TBL_LEAVE_TYPE_CODE FOREIGN KEY (LEAVE_TYPE_CODE) REFERENCES TBL_LEAVE_TYPE(LEAVE_TYPE_CODE);

ALTER TABLE TBL_LEAVE_REQUEST ADD (SUPPORTING_DOC BLOB, MIME_TYPE VARCHAR2(100), FILE_NAME VARCHAR2(255), DOC_UPLOAD_DATE DATE);

ALTER TABLE TBL_LEAVE_REQUEST MODIFY DOC_UPLOAD_DATE DEFAULT SYSDATE;

CREATE OR REPLACE FUNCTION fn_validate_leave_msg (
    p_leave_type VARCHAR2,
    p_from_date  DATE,
    p_to_date    DATE
) RETURN VARCHAR2
IS
    l_required_days NUMBER;
    l_actual_days   NUMBER := 0;
BEGIN
    -- Handle NULL dates early
    IF p_from_date IS NULL OR p_to_date IS NULL THEN
        RETURN 'From and To Dates must not be empty.';
    END IF;

    -- Determine required working days
    CASE p_leave_type
        WHEN 'SICK'      THEN l_required_days := 5;
        WHEN 'EMERGENCY' THEN l_required_days := 3;
        WHEN 'COMPENSATORY OFF'   THEN l_required_days := 2;
        WHEN 'CASUAL'    THEN l_required_days := 5;
        WHEN 'VACATION'  THEN l_required_days := 10;
        ELSE
            RETURN 'Unknown leave type: ' || p_leave_type;
    END CASE;

    -- Count working days
    FOR i IN 0 .. (p_to_date - p_from_date) LOOP
        IF TO_CHAR(p_from_date + i, 'DY', 'NLS_DATE_LANGUAGE=ENGLISH') NOT IN ('SAT', 'SUN') THEN
            l_actual_days := l_actual_days + 1;
        END IF;
    END LOOP;

    -- Return validation result
    IF l_actual_days <= l_required_days THEN
        RETURN NULL;
    ELSE
        RETURN 'You selected ' || l_actual_days || ' working days. Max allowed for ' ||
               UPPER(p_leave_type) || ' is ' || l_required_days || ' days.';
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Error: ' || SQLERRM;
END;
/

CREATE OR REPLACE TRIGGER trg_update_requested_on
BEFORE UPDATE ON TBL_LEAVE_REQUEST
FOR EACH ROW
BEGIN
  :NEW.REQUESTED_ON := SYSDATE;
END;


-- ========================
-- 6. SEMESTER TABLE
-- ========================
CREATE TABLE TBL_SEMESTER (
    SEMESTER_ID     NUMBER PRIMARY KEY,
    SEMESTER_NO     NUMBER(1) NOT NULL,
    START_DATE      DATE NOT NULL,
    END_DATE        DATE NOT NULL,
    DESCRIPTION     VARCHAR2(100)
);

CREATE SEQUENCE SEQ_SEMESTER START WITH 1 INCREMENT BY 1;

-- ========================
-- 7 DEPARTMENT-SEMESTER TABLE
-- ========================
CREATE TABLE TBL_DEPT_SEMESTER (
    DEPT_SEMESTER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DEPT_ID          NUMBER NOT NULL,
    SEMESTER_ID      NUMBER NOT NULL,
    ACADEMIC_YEAR    VARCHAR2(9) NOT NULL, -- format: YYYY-YYYY
    CONSTRAINT fk_dept FOREIGN KEY (DEPT_ID) REFERENCES TBL_DEPARTMENT(DID),
    CONSTRAINT fk_sem FOREIGN KEY (SEMESTER_ID) REFERENCES TBL_SEMESTER(SEMESTER_ID)
);

CREATE SEQUENCE SEQ_DEPT_SEMESTER START WITH 1 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_add_dept_semesters
AFTER INSERT OR UPDATE ON TBL_SEMESTER
FOR EACH ROW
BEGIN
    -- Insert a record for each existing department for the new semester
    INSERT INTO TBL_DEPT_SEMESTER (DEPT_SEMESTER_ID, DEPT_ID, SEMESTER_ID, ACADEMIC_YEAR)
    SELECT SEQ_DEPT_SEMESTER.NEXTVAL, D.DID, :NEW.SEMESTER_ID, EXTRACT(YEAR FROM SYSDATE) || '-' || (EXTRACT(YEAR FROM SYSDATE) + 4)
    FROM TBL_DEPARTMENT D;
END;
/

ALTER TABLE TBL_DEPT_SEMESTER MODIFY (ACADEMIC_YEAR VARCHAR2(100));

-- ========================
-- 8 PROJECT TABLE
-- ========================
CREATE TABLE TBL_PROJECTS (
  PROJECT_ID NUMBER PRIMARY KEY,
  DEPARTMENT_ID NUMBER NOT NULL,
  PROJECT_NAME VARCHAR2(200) NOT NULL,
  DESCRIPTION VARCHAR2(1000),
  CREATED_BY NUMBER NOT NULL,
  CREATED_DATE DATE DEFAULT SYSDATE,
  STATUS VARCHAR2(20) DEFAULT 'ACTIVE'
);

ALTER TABLE TBL_PROJECTS ADD CONSTRAINT FK_PROJECT_DEPT FOREIGN KEY (DEPARTMENT_ID) REFERENCES TBL_DEPARTMENT(DID);

ALTER TABLE TBL_PROJECTS ADD CONSTRAINT FK_PROJECT_CREATED_BY FOREIGN KEY (CREATED_BY) REFERENCES TBL_TEACHER(TEACHER_ID);

ALTER TABLE TBL_PROJECTS ADD SUBMISSION_DATE DATE;

CREATE SEQUENCE SEQ_PROJECTS START WITH 1 INCREMENT BY 1;

BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
    job_name        => 'UPDATE_STATUS_DAILY',
    job_type        => 'PLSQL_BLOCK',
    job_action      => '
      BEGIN
        UPDATE TBL_PROJECTS
           SET STATUS = ''INACTIVE''
         WHERE SUBMISSION_DATE < TRUNC(SYSDATE)
           AND STATUS <> ''INACTIVE'';
        COMMIT;
      END;',
    start_date      => SYSTIMESTAMP,
    repeat_interval => 'FREQ=DAILY; BYHOUR=0; BYMINUTE=0; BYSECOND=0',
    enabled         => TRUE
  );
END;
/

ALTER TABLE TBL_PROJECTS ADD (DEPT_SEMESTER_ID NUMBER);

ALTER TABLE TBL_PROJECTS ADD CONSTRAINT FK_PROJECTS_DEPT_SEM FOREIGN KEY (DEPT_SEMESTER_ID) REFERENCES TBL_DEPT_SEMESTER(DEPT_SEMESTER_ID);

CREATE OR REPLACE TRIGGER TRG_PROJECT_SEMESTER
BEFORE INSERT OR UPDATE ON TBL_PROJECTS
FOR EACH ROW
DECLARE
    v_dept_sem_id NUMBER;
BEGIN
  -- Find matching dept-semester for the project's department and submission date
    SELECT 
        ds.DEPT_SEMESTER_ID
    INTO 
        v_dept_sem_id
    FROM 
        TBL_DEPT_SEMESTER ds
    JOIN 
        TBL_SEMESTER s 
    ON 
        s.SEMESTER_ID = ds.SEMESTER_ID
    WHERE 
        ds.DEPT_ID = :NEW.DEPARTMENT_ID
    AND :NEW.SUBMISSION_DATE BETWEEN s.START_DATE AND s.END_DATE
    FETCH FIRST 1 ROWS ONLY;

  -- Assign dept_semester_id
    :NEW.DEPT_SEMESTER_ID := v_dept_sem_id;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001,
        'No semester found for this department and submission date.')
    ;
END;
/


-- ========================
-- 9. PROJECT SUBMISSION
-- ========================
CREATE TABLE TBL_PROJECT_SUBMISSION (
    SUBMISSION_ID     NUMBER PRIMARY KEY,
    PROJECT_ID        NUMBER NOT NULL REFERENCES TBL_PROJECTS(PROJECT_ID),
    STUDENT_ID        NUMBER NOT NULL REFERENCES TBL_STUDENT(STUDENT_ID),
    SUBMITTED_ON      DATE DEFAULT SYSDATE,
    DOCUMENTS              BLOB,
    DOC_NAME         VARCHAR2(255),
    DOC_MIMETYPE     VARCHAR2(100),
    STATUS            VARCHAR2(20) DEFAULT 'SUBMITTED'
);

CREATE SEQUENCE SEQ_SUBMIT START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;


-- ========================
-- 10. ATTENDANCE
-- ========================
CREATE TABLE TBL_ATTENDANCE (
    ATTENDANCE_ID     NUMBER PRIMARY KEY,
    TEACHER_ID        NUMBER NOT NULL,
    SEMESTER_ID  NUMBER NOT NULL,
    DID               NUMBER NOT NULL,
    ATTEND_DATE       DATE DEFAULT TRUNC(SYSDATE),
    CONSTRAINT fk_att_teacher FOREIGN KEY (TEACHER_ID) REFERENCES TBL_TEACHER(TEACHER_ID),
    CONSTRAINT fk_att_did FOREIGN KEY (DID) REFERENCES TBL_DEPARTMENT(DID),
    CONSTRAINT fk_att_did FOREIGN KEY (DID) REFERENCES TBL_DEPARTMENT(DID)
);

CREATE SEQUENCE SEQ_ATTENDANCE START WITH 1 INCREMENT BY 1;

ALTER TABLE TBL_ATTENDANCE ADD CONSTRAINT uq_att_teacher_date UNIQUE (TEACHER_ID, ATTEND_DATE);

-- ========================
-- 11. ATTENDANCE DETAIL
-- ========================
CREATE TABLE TBL_ATTENDANCE_DETAIL (
    DETAIL_ID        NUMBER PRIMARY KEY,
    ATTENDANCE_ID    NUMBER NOT NULL,
    STUDENT_ID       NUMBER NOT NULL,
    STATUS           VARCHAR2(10) CHECK (STATUS IN ('PRESENT','ABSENT','LATE')),
    CONSTRAINT fk_att_master FOREIGN KEY (ATTENDANCE_ID) 
        REFERENCES TBL_ATTENDANCE(ATTENDANCE_ID),
    CONSTRAINT fk_att_student FOREIGN KEY (STUDENT_ID) 
        REFERENCES TBL_STUDENT(STUDENT_ID)
);

CREATE SEQUENCE SEQ_ATTENDANCE_DETAIL START WITH 1 INCREMENT BY 1;


-- ==========================
-- 12. SEMESTER FEES 
-- ==========================
CREATE TABLE TBL_FEES_MASTER (
    FEE_ID        NUMBER PRIMARY KEY,
    SEMESTER_NO   NUMBER NOT NULL,
    AMOUNT        NUMBER(10,2) NOT NULL,
    DUE_DATE      DATE NOT NULL,
    DESCRIPTION   VARCHAR2(500)
);

CREATE SEQUENCE SEQ_FEES_MASTER START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;


-- ==========================
-- 13. SEMESTER REGISTRATION 
-- ==========================
CREATE TABLE TBL_SEMESTER_REGISTRATION (
    REG_ID         NUMBER PRIMARY KEY,
    STUDENT_ID     NUMBER NOT NULL,
    SEMESTER_NO    NUMBER NOT NULL,
    REG_DATE       DATE DEFAULT SYSDATE,
    FEES_AMOUNT    NUMBER(10,2) NOT NULL,
    FEES_STATUS    VARCHAR2(20) DEFAULT 'UNPAID', -- UNPAID / PAID
    PAYMENT_DATE   DATE,
    CONSTRAINT FK_STUDENT_REG FOREIGN KEY (STUDENT_ID) REFERENCES TBL_STUDENT(STUDENT_ID)
);

CREATE SEQUENCE SEQ_SEM_REG START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;


-- =============================
-- 14. STUDENT X PAYMENT
-- =============================
CREATE TABLE STUDENT_NEXT_FEES_DESC AS
SELECT 
    s.STUDENT_ID,
    s.FIRST_NAME || ' ' || s.LAST_NAME AS STUDENT_NAME,
    sem.SEMESTER_NO,
    f.AMOUNT,
    f.DUE_DATE,
    f.DESCRIPTION,
    NVL(r.FEES_STATUS, 'UNPAID') AS FEES_STATUS,
    r.PAYMENT_DATE
FROM 
    TBL_STUDENT s
JOIN
    TBL_DEPT_SEMESTER ds
    ON ds.DEPT_ID = s.DID
JOIN
    TBL_SEMESTER sem
    ON sem.SEMESTER_ID = ds.SEMESTER_ID
JOIN
    TBL_FEES_MASTER f
    ON f.SEMESTER_NO = sem.SEMESTER_NO
LEFT JOIN
    TBL_SEMESTER_REGISTRATION r
    ON r.STUDENT_ID = s.STUDENT_ID
   AND r.SEMESTER_NO = f.SEMESTER_NO
WHERE 
    f.SEMESTER_NO = (
        SELECT MIN(f2.SEMESTER_NO)
        FROM TBL_FEES_MASTER f2
        LEFT JOIN TBL_SEMESTER_REGISTRATION r2
        ON r2.SEMESTER_NO = f2.SEMESTER_NO
       AND r2.STUDENT_ID = s.STUDENT_ID
        WHERE NVL(r2.FEES_STATUS,'UNPAID') = 'UNPAID'
    )
;

BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
        job_name        => 'JOB_REFRESH_STUDENT_FEES_DESC',
        job_type        => 'PLSQL_BLOCK',
        job_action      => 'BEGIN PRC_REFRESH_STUDENT_NEXT_FEES; END;',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=DAILY; BYHOUR=0; BYMINUTE=0; BYSECOND=0', -- every midnight
        enabled         => TRUE
    );
END;
/


-- ================================
-- 15. PROJECT EVALUATION CRITERIA
-- ================================
CREATE TABLE TBL_PROJECT_EVAL_CRITERIA (
    CRITERIA_ID   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CRITERIA_NAME VARCHAR2(50),
    MAX_MARKS     NUMBER(5,2)
);


-- ===================================
-- 16. ATTENDANCE EVALUATION CRITERIA
-- ===================================
CREATE TABLE TBL_ATTENDANCE_CRITERIA (
    CRITERIA_ID     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    MIN_PERCENT     NUMBER(5,2) NOT NULL,
    MAX_PERCENT     NUMBER(5,2) NOT NULL,
    REMARKS         VARCHAR2(50)
);

ALTER TABLE TBL_ATTENDANCE_CRITERIA ADD MARKS NUMBER;


-- ==================
-- 17. PROJECT MARKS
-- ==================
CREATE TABLE TBL_PROJECT_MARKS (
    MARK_ID          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    SUBMISSION_ID    NUMBER NOT NULL,  -- FK to TBL_PROJECT_SUBMISSION
    TEACHER_ID       NUMBER NOT NULL,  -- Who graded
    GIVEN_MARKS      NUMBER(5,2),      -- Marks awarded
    NOTES            VARCHAR2(500),    -- Optional notes/comments
    MARKED_ON        DATE DEFAULT SYSDATE
);

-- Foreign key to submission
ALTER TABLE TBL_PROJECT_MARKS
ADD CONSTRAINT FK_MARK_SUBMISSION FOREIGN KEY (SUBMISSION_ID)
REFERENCES TBL_PROJECT_SUBMISSION(SUBMISSION_ID);

-- Foreign key to teacher
ALTER TABLE TBL_PROJECT_MARKS
ADD CONSTRAINT FK_MARK_TEACHER FOREIGN KEY (TEACHER_ID)
REFERENCES TBL_TEACHER(TEACHER_ID);
